<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Twilio Voice Call Test</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 600px;
            margin: 50px auto;
            padding: 20px;
            background-color: #f5f5f5;
        }
        .container {
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        h1 {
            color: #333;
            text-align: center;
            margin-bottom: 30px;
        }
        form {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }
        label {
            font-weight: bold;
            color: #555;
        }
        input[type="text"] {
            padding: 12px;
            border: 2px solid #ddd;
            border-radius: 5px;
            font-size: 16px;
        }
        input[type="text"]:focus {
            outline: none;
            border-color: #007bff;
        }
        button {
            background-color: #007bff;
            color: white;
            padding: 12px 20px;
            border: none;
            border-radius: 5px;
            font-size: 16px;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        button:hover {
            background-color: #0056b3;
        }
        .info {
            background-color: #e7f3ff;
            padding: 15px;
            border-radius: 5px;
            margin-top: 20px;
            border-left: 4px solid #007bff;
        }
        .info h3 {
            margin-top: 0;
            color: #333;
        }
        .info ul {
            margin: 10px 0;
            padding-left: 20px;
        }
        .info li {
            margin: 5px 0;
        }
    </style>
    <script type="text/javascript" src="//js.twilio.com/v1/twilio.min.js"></script>
</head>
<body>
    <div class="container">
        <h1>üîä Twilio Free Trial Voice Call</h1>

        <div id="call-controls">
            <p>Twilio.Device Ready? <span id="status">No</span></p>

            <form action="#" id="call-form">
                <label for="phone-number">Call a number:</label>
                <input type="text" id="phone-number" placeholder="+91XXXXXXXXX or +1XXXXXXXXXX">
                <button id="call-button" type="button">Call</button>
            </form>

            <div id="incoming-call-div" style="display: none;">
                <h2>Incoming Call!</h2>
                <p>From: <span id="incoming-call-from"></span></p>
                <button id="answer-button">Answer</button>
                <button id="reject-button">Reject</button>
            </div>

            <button id="hangup-button" style="display: none;">Hangup</button>
        </div>

        <% if (message) { %>
            <div class="info">
                <h3><%= message %></h3>
            </div>
        <% } %>

        <form action="/make-call" method="POST" style="display: none;">
            <label for="phone">Enter Verified Phone Number:</label>
            <input type="text" id="phone" name="phone" placeholder="+91XXXXXXXXX or +1XXXXXXXXXX" required>
            <button type="submit">üìû Make Call (Server-side)</button>
        </form>

        <div class="info">
            <h3>üìã Important Notes:</h3>
            <ul>
                <li><strong>Free Trial:</strong> You can only call verified phone numbers</li>
                <li><strong>Format:</strong> Use international format (e.g., +91XXXXXXXXX for India, +1XXXXXXXXXX for US)</li>
                <li><strong>Verification:</strong> Add your phone number in Twilio Console first</li>
                <li><strong>Credits:</strong> $15 free trial credits cover hundreds of minutes</li>
                <li><strong>Test Message:</strong> You'll hear "Hello! This is a test call from your Twilio free trial account."</li>
            </ul>
        </div>

        <div class="info">
            <h3>üõ†Ô∏è Setup Instructions:</h3>
            <ul>
                <li>1. Replace credentials in <code>.env</code> file with your Twilio account details</li>
                <li>2. Update the webhook URL in <code>server.js</code> to your deployed server URL</li>
                <li>3. Deploy to Render, Vercel, or any HTTPS hosting platform</li>
                <li>4. Verify your phone number in Twilio Console</li>
                <li>5. Test the call functionality</li>
            </ul>
        </div>
    </div>

    <script>
        const statusSpan = document.getElementById('status');
        const callButton = document.getElementById('call-button');
        const hangupButton = document.getElementById('hangup-button');
        const incomingCallDiv = document.getElementById('incoming-call-div');
        const incomingCallFromSpan = document.getElementById('incoming-call-from');
        const answerButton = document.getElementById('answer-button');
        const rejectButton = document.getElementById('reject-button');
        const phoneNumberInput = document.getElementById('phone-number');

        let device;
        let activeCall;

        // Fetch token and initialize Twilio Device
        async function initializeDevice() {
            try {
                const response = await fetch('/token');
                const data = await response.json();
                const token = data.token;

                device = new Twilio.Device(token, {
                    enableRinging: true,
                    debug: true,
                });

                device.on('ready', () => {
                    statusSpan.textContent = 'Yes';
                    console.log('Twilio.Device is ready!');
                });

                device.on('error', (error) => {
                    statusSpan.textContent = 'Error';
                    console.error('Twilio.Device Error: ', error);
                });

                device.on('incoming', (call) => {
                    activeCall = call;
                    incomingCallFromSpan.textContent = call.parameters.From;
                    incomingCallDiv.style.display = 'block';
                    hangupButton.style.display = 'block';
                    console.log('Incoming call from:', call.parameters.From);
                });

                device.on('disconnect', (connection) => {
                    console.log('Call disconnected');
                    activeCall = null;
                    hangupButton.style.display = 'none';
                    incomingCallDiv.style.display = 'none';
                });

            } catch (error) {
                console.error('Error initializing Twilio Device: ', error);
                statusSpan.textContent = 'Error';
            }
        }

        // Make a call
        callButton.addEventListener('click', () => {
            const phoneNumber = phoneNumberInput.value;
            if (phoneNumber) {
                console.log('Making call to:', phoneNumber);
                const params = { To: phoneNumber };
                activeCall = device.connect(params);
                hangupButton.style.display = 'block';
            }
        });

        // Answer an incoming call
        answerButton.addEventListener('click', () => {
            if (activeCall) {
                activeCall.accept();
                incomingCallDiv.style.display = 'none';
                console.log('Call answered');
            }
        });

        // Reject an incoming call
        rejectButton.addEventListener('click', () => {
            if (activeCall) {
                activeCall.reject();
                incomingCallDiv.style.display = 'none';
                hangupButton.style.display = 'none';
                console.log('Call rejected');
            }
        });

        // Hang up a call
        hangupButton.addEventListener('click', () => {
            if (activeCall) {
                activeCall.disconnect();
            } else if (device) {
                device.disconnectAll();
            }
            hangupButton.style.display = 'none';
            incomingCallDiv.style.display = 'none';
            console.log('Call hung up');
        });

        // Initialize device on page load
        initializeDevice();

    </script>
</body>
</html>